  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è onchange
        window.updateSelectBackground = function(selectElement) {
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –¥–ª—è select —Å value: ${selectElement.value}`);
            selectElement.style.backgroundColor = '';
            selectElement.style.color = '';
            switch (selectElement.value) {
                case 'paid':
                    selectElement.style.backgroundColor = '#FEDB5B';
                    selectElement.style.color = '#000';
                    break;
                case 'unpaid':
                    selectElement.style.backgroundColor = '#DD8137';
                    selectElement.style.color = '#FFF';
                    break;
                case 'weekend':
                    selectElement.style.backgroundColor = '#A6A6A6';
                    selectElement.style.color = '#FFF';
                    break;
                default:
                    break;
            }
        };
        function sortLogsByDate(logs) {
            logs.sort((a, b) => new Date(a.log_date) - new Date(b.log_date));
        }

        window.updateHolidayStatus = function(selectElement, employeeId) {
            const logId = selectElement.dataset.logId;
            const newHolidayStatus = selectElement.value;
            const previousValue = selectElement.dataset.previousValue;
            console.log(`üü° –í—ã–±—Ä–∞–Ω logId=${logId}, employeeId=${employeeId}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newHolidayStatus}`);

    if (!logId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: logId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dataset.");
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ –¥–∞—Ç—ã –∏–∑ #filterButton
            const filterButton = document.getElementById('filterButton');
            const currentFilter = filterButton.dataset.currentFilter;
            const startDate = filterButton.dataset.startDate;
            const endDate = filterButton.dataset.endDate;

            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è log ${logId}, filter: ${currentFilter}, start: ${startDate}, end: ${endDate}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if (currentFilter === 'thismonth' && newHolidayStatus === 'paid') {
                if (!confirm('¬øEst√°s seguro? Esto reiniciar√° el registro de trabajo.')) {
                    selectElement.value = previousValue;
                    updateSelectBackground(selectElement);
                    console.log(`–û—Ç–º–µ–Ω–∞: –°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ ${previousValue} –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ ${currentFilter}`);
                    return;
                }
                console.log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ Pagado –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ ${currentFilter}`);
            } else if (newHolidayStatus === 'paid' || newHolidayStatus === 'unpaid') {
                if (!confirm('¬øEst√°s seguro? Esto reiniciar√° el registro de trabajo.')) {
                    selectElement.value = previousValue;
                    updateSelectBackground(selectElement);
                    console.log(`–û—Ç–º–µ–Ω–∞: –°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ ${previousValue}`);
                    return;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω select —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É
            updateSelectBackground(selectElement);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –¥–∞—Ç–∞–º–∏
            $.ajax({
                url: `/update_work_log/${logId}`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    holiday_status: newHolidayStatus,
                    employee_id: employeeId,
                    reset_worklog: newHolidayStatus === 'paid' || newHolidayStatus === 'unpaid',
                    filter_type: currentFilter,
                    start_date: startDate,
                    end_date: endDate
                }),
                success: function(response) {
                    if (response.success) {
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è log ${logId}: ${newHolidayStatus}`);
                        selectElement.dataset.previousValue = newHolidayStatus;
                        updateSummaryPanel(employeeId, response.summary);
                        if (response.reset) {
                            const row = selectElement.closest('tr');
                            row.querySelector('.check-in-time').textContent = '--:--';
                            row.querySelector('.check-out-time').textContent = '--:--';
                            row.querySelector('.worked-hours').textContent = '0h 0min';
                            console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ worklog –¥–ª—è log ${logId}`);
                        }
                    fetch("/get_work_logs")
                            .then(response => response.json())
                             .then(data => {
                                sortLogsByDate(data.logs);
                                renderLogs(data.logs);
                    });
                     } else {
                        console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
                        selectElement.value = previousValue;
                        updateSelectBackground(selectElement);
                    }
                },
                error: function(xhr, status, error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ AJAX: ${error} (Status: ${xhr.status})`);
                    selectElement.value = previousValue;
                    updateSelectBackground(selectElement);
                }
            });
        };

        window.updateSummaryPanel = function(employeeId, summary) {
            const summaryPanel = document.getElementById(`summary-panel-${employeeId}`);
            if (summaryPanel) {
                summaryPanel.querySelector('.total-hours').textContent = summary.total_hours;
                summaryPanel.querySelector('.total-days').textContent = summary.working_days;
                summaryPanel.querySelector('.overtime-hours').textContent = summary.overtime_hours;
                summaryPanel.querySelector('.paid-holidays').textContent = summary.paid_holidays;
                summaryPanel.querySelector('.unpaid-holidays').textContent = summary.unpaid_holidays;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å Resumen –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId}:`, summary);
            } else {
                console.error(`‚ùå –ü–∞–Ω–µ–ª—å Resumen –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ dropdown-–º–µ–Ω—é
        window.toggleDropdown = function(event) {
            event.preventDefault();
            event.stopPropagation();
            const dropdownMenu = document.getElementById('dropdown-menu');
            if (!dropdownMenu) {
                console.error("‚ùå Dropdown-–º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM!");
                return;
            }
            console.log("üìå –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç—Ä–æ–µ—Ç–æ—á–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é");
            const isActive = dropdownMenu.classList.contains('active');
            dropdownMenu.classList.toggle('active');
            console.log(`üìå Dropdown-–º–µ–Ω—é ${isActive ? '–∑–∞–∫—Ä—ã—Ç–æ' : '–æ—Ç–∫—Ä—ã—Ç–æ'}, –∫–ª–∞—Å—Å—ã: ${dropdownMenu.className}`);
        };

        // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown-–º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', function(event) {
            const dropdownMenu = document.getElementById('dropdown-menu');
            const ellipsisBtn = document.querySelector('.ellipsis-btn');
            if (dropdownMenu && !dropdownMenu.contains(event.target) && event.target !== ellipsisBtn) {
                dropdownMenu.classList.remove('active');
                console.log('üìå Dropdown-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ (–∫–ª–∏–∫ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏)');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "Todo" - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        document.addEventListener('DOMContentLoaded', function() {
            const chooseAllBtn = document.getElementById('choose-all-btn');
            if (chooseAllBtn) {
                let allChecked = false;
                chooseAllBtn.addEventListener('click', function() {
                    const checkboxes = document.querySelectorAll('.round-checkbox.employee-checkbox');
                    allChecked = !allChecked;
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = allChecked;
                        console.log(`üìå –ß–µ–∫–±–æ–∫—Å ${checkbox.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${allChecked}`);
                    });
                    console.log(`üìå –í—Å–µ —á–µ–∫–±–æ–∫—Å—ã ${allChecked ? '–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' : '—Å–Ω—è—Ç—ã'}`);
                    const dropdownMenu = document.getElementById('dropdown-menu');
                    if (dropdownMenu) {
                        dropdownMenu.classList.remove('active');
                        console.log('üìå Dropdown-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "Todo"');
                    }
                });
            } else {
                console.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Todo' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "Add Day" - –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const addDayBtn = document.getElementById('add-day-btn');
            if (addDayBtn) {
                addDayBtn.addEventListener('click', function() {
                    const checkedCheckboxes = document.querySelectorAll('.round-checkbox.employee-checkbox:checked');
                    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${checkedCheckboxes.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
                    if (checkedCheckboxes.length === 1) {
                        const employeeId = checkedCheckboxes[0].id.replace('employee_', '');
                        const employeeName = checkedCheckboxes[0].closest('.employee-section').querySelector('.employee-header h2').textContent;
                        openAddDayModal(employeeId, employeeName);
                        const dropdownMenu = document.getElementById('dropdown-menu');
                        if (dropdownMenu) {
                            dropdownMenu.classList.remove('active');
                            console.log('üìå Dropdown-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "Add Day"');
                        }
                    } else {
                        alert('Por favor, seleccione exactamente un empleado.');
                        console.log('‚ùå –í—ã–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
                    }
                });
            } else {
                console.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Add Day' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "Random" - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
            const randomBtn = document.getElementById('random-btn');
            if (randomBtn) {
                randomBtn.addEventListener('click', function() {
                    const checkedCheckboxes = document.querySelectorAll('.round-checkbox.employee-checkbox:checked');
                    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${checkedCheckboxes.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è Random`);
                    if (checkedCheckboxes.length > 0) {
                        showRandomCheckboxes(checkedCheckboxes);
                        const dropdownMenu = document.getElementById('dropdown-menu');
                        if (dropdownMenu) {
                            dropdownMenu.classList.remove('active');
                            console.log('üìå Dropdown-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "Random"');
                        }
                    } else {
                        alert('Por favor, seleccione al menos un empleado.');
                        console.log('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
                    }
                });
            } else {
                console.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Random' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö select —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('.holiday-select').forEach(select => {
                updateSelectBackground(select);
                select.addEventListener('change', function () {
                    updateSelectBackground(this);
                });
            });
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
        window.showRandomCheckboxes = function(checkedCheckboxes) {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', Array.from(checkedCheckboxes).map(cb => cb.id));
            const worklogCheckboxes = document.querySelectorAll('.worklog-random-checkbox');

            const employeeIds = new Set(Array.from(checkedCheckboxes).map(cb => cb.id.replace('employee_', '')));
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${worklogCheckboxes.length} —á–µ–∫–±–æ–∫—Å–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º .worklog-random-checkbox, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${Array.from(employeeIds)}`);

            worklogCheckboxes.forEach(checkbox => {
                const employeeId = checkbox.dataset.employeeId;
                if (employeeIds.has(employeeId)) {
                    const checkboxColumn = document.getElementById(`checkbox-column-${employeeId}`);
                    const checkboxCells = document.querySelectorAll(`.checkbox-cell-${employeeId}`);
                    if (checkboxColumn && checkboxCells.length > 0) {
                        checkboxColumn.style.display = 'table-cell';
                        checkboxCells.forEach(cell => {
                            cell.style.display = 'table-cell';
                            const cb = cell.querySelector('.worklog-random-checkbox');
                            if (cb) {
                                cb.style.display = 'inline';
                                console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω —á–µ–∫–±–æ–∫—Å –¥–ª—è log ${cb.dataset.logId}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeId}`);
                            }
                        });
                    } else {
                        console.error(`‚ùå –ö–æ–ª–æ–Ω–∫–∞ –∏–ª–∏ —è—á–µ–π–∫–∏ "Seleccionar" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId}`);
                    }
                } else {
                    checkbox.style.display = 'none';
                    console.log(`‚õî –°–∫—Ä—ã—Ç —á–µ–∫–±–æ–∫—Å –¥–ª—è log ${checkbox.dataset.logId}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeId}`);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Siguiente" –ø–æ–¥ –∫–∞–∂–¥—ã–π summary-panel –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employeeIds.forEach(employeeId => {
                const summaryPanel = document.getElementById(`summary-panel-${employeeId}`);
                if (summaryPanel && !document.getElementById(`randomNextBtn-${employeeId}`)) {
                    const nextButton = document.createElement('button');
                    nextButton.textContent = 'Siguiente';
                    nextButton.id = `randomNextBtn-${employeeId}`;
                    nextButton.style.margin = '10px 0';
                    nextButton.style.padding = '5px 10px';
                    nextButton.style.backgroundColor = '#fb8c86';
                    nextButton.style.color = 'white';
                    nextButton.style.border = 'none';
                    nextButton.style.borderRadius = '5px';
                    nextButton.style.cursor = 'pointer';
                    nextButton.onclick = function() {
                        const selectedLogIds = Array.from(worklogCheckboxes)
                            .filter(cb => cb.dataset.employeeId === employeeId && cb.checked)
                            .map(cb => cb.dataset.logId);
                        if (selectedLogIds.length > 0) {
                            openRandomModal(selectedLogIds);
                            document.getElementById(`randomNextBtn-${employeeId}`).remove();
                            worklogCheckboxes.forEach(cb => {
                                if (cb.dataset.employeeId === employeeId) {
                                    cb.style.display = 'none';
                                    const checkboxColumn = document.getElementById(`checkbox-column-${employeeId}`);
                                    const checkboxCells = document.querySelectorAll(`.checkbox-cell-${employeeId}`);
                                    if (checkboxColumn && checkboxCells.length > 0) {
                                        checkboxColumn.style.display = 'none';
                                        checkboxCells.forEach(cell => {
                                            cell.style.display = 'none';
                                        });
                                    }
                                }
                            });
                        } else {
                            alert('Por favor, seleccione al menos un d√≠a para este empleado.');
                        }
                    };
                    // –ö–Ω–æ–ø–∫–∞ Todo
                        const todoButton = document.createElement('button');
                        todoButton.textContent = 'Todo';
                        todoButton.id = `randomTodoBtn-${employeeId}`;
                        todoButton.className = 'btn-todo';
                        todoButton.style.backgroundColor = '#fb8c86';
                        todoButton.style.color = '#fff';
                        todoButton.style.padding = '5px 10px';
                        todoButton.style.borderRadius = '5px';
                        todoButton.style.border = 'none';
                        todoButton.style.margin = '10px 0';
                        todoButton.onclick = function() {
                            const checkboxes = Array.from(worklogCheckboxes)
                                .filter(cb => cb.dataset.employeeId === employeeId);

                            const allChecked = checkboxes.every(cb => cb.checked);

                            checkboxes.forEach(cb => cb.checked = !allChecked);

                            console.log(`üìå ${allChecked ? '–°–Ω—è—Ç—ã' : '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'} –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId}`);
                        };


                        summaryPanel.appendChild(nextButton);
                        summaryPanel.appendChild(todoButton);

                    summaryPanel.appendChild(nextButton);
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "Siguiente" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ summary-panel –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeId}`);
                }
            });
        };
//qwfqweegf
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è
        window.openAddDayModal = function(employeeId, employeeName) {
            const modal = document.getElementById('addDayModal');
            const employeeNameInput = document.getElementById('employeeName');
            const employeeIdInput = document.getElementById('employeeId');
            if (modal && employeeNameInput && employeeIdInput) {
                employeeNameInput.value = employeeName;
                employeeIdInput.value = employeeId;
                modal.classList.remove('hidden');
                modal.classList.add('modal-unique', 'active');
                console.log(`üìå –û—Ç–∫—Ä—ã—Ç –º–æ–¥–∞–ª—å–Ω—ã–π –æ–∫–Ω–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeName} (ID: ${employeeId})`);
            } else {
                console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –ø–æ–ª–µ –∏–º–µ–Ω–∏/ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            }
        };
        window.selectedLogEntries = [];
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è Random
          window.openRandomModal = function(selectedLogIds) {
            const modal = document.getElementById('randomModal');
            if (modal) {
                modal.classList.remove('hidden');
                modal.classList.add('modal-unique', 'active');

                // –°–æ–±–∏—Ä–∞–µ–º employeeId –≤–º–µ—Å—Ç–µ —Å logId
                window.selectedLogEntries = selectedLogIds.map(logId => {
                    const select = document.querySelector(`#holiday-select-${logId}`);
                    return {
                        logId,
                        employeeId: select?.dataset.employeeId || null
                    };
                });

        console.log(`üìå –û—Ç–∫—Ä—ã—Ç –º–æ–¥–∞–ª –¥–ª—è ${window.selectedLogEntries.length} –ª–æ–≥–æ–≤:`, window.selectedLogEntries);
    } else {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Random –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
};


        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è
        window.closeAddDayModal = function() {
            const modal = document.getElementById('addDayModal');
            if (modal) {
                modal.classList.remove('active');
                modal.classList.add('hidden');
                console.log('üìå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Random
        window.closeRandomModal = function() {
            const modal = document.getElementById('randomModal');
            if (modal) {
                modal.classList.remove('active');
                modal.classList.add('hidden');
                console.log('üìå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Random –∑–∞–∫—Ä—ã—Ç–æ');
            }
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è
        document.getElementById('addDayForm')?.addEventListener('submit', function(event) {
            event.preventDefault();
            const employeeId = document.getElementById('employeeId').value;
            const logDate = document.getElementById('logDate').value;
            const checkInTime = document.getElementById('checkInTime').value;
            const checkOutTime = document.getElementById('checkOutTime').value;

            console.log(`üìå –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: Employee ID: ${employeeId}, Date: ${logDate}, Check-in: ${checkInTime}, Check-out: ${checkOutTime}`);

            $.ajax({
                url: `/add_work_log/${employeeId}`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    log_date: logDate,
                    check_in_time: checkInTime,
                    check_out_time: checkOutTime
                }),
                success: function(response) {
                    if (response.success) {
                        console.log('‚úÖ –î–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        closeAddDayModal();
                        location.reload();
                    } else {
                        console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
                    }
                },
                error: function(xhr, status, error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ AJAX: ${error} (Status: ${xhr.status})`);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã Random
        document.getElementById('randomForm')?.addEventListener('submit', function(event) {
            event.preventDefault();

            const startRangeMin = document.getElementById('startRangeMin').value;
            const startRangeMax = document.getElementById('startRangeMax').value;
            const endRangeMin = document.getElementById('endRangeMin').value;
            const endRangeMax = document.getElementById('endRangeMax').value;

            const entries = window.selectedLogEntries || [];

            if (!entries.length) {
                alert("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤");
                return;
            }

            console.log(`üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ ${entries.length} –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Random`);

            let completed = 0;

            entries.forEach(({ logId, employeeId }) => {
                const randomCheckIn = generateRandomTime(startRangeMin, startRangeMax);
                const randomCheckOut = generateRandomTime(endRangeMin, endRangeMax);

                $.ajax({
                    url: `/update_work_log/${logId}`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        holiday_status: 'workingday',
                        check_in_time: randomCheckIn,
                        check_out_time: randomCheckOut,
                        employee_id: employeeId,
                        reset_worklog: false
                    }),
                    success: function(response) {
                        if (response.success) {
                            console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: log ${logId}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeId}`);
                        } else {
                            console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
                        }
                        completed++;
                        if (completed === entries.length) {
                            closeRandomModal();
                            location.reload();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ AJAX –¥–ª—è log ${logId}: ${error}`);
                        completed++;
                        if (completed === entries.length) {
                            closeRandomModal();
                            location.reload();
                        }
                    }
                });
            });
        });
//q
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        function generateRandomTime(minTime, maxTime) {
            const min = new Date(`1970-01-01T${minTime}:00`);
            const max = new Date(`1970-01-01T${maxTime}:00`);
            const randomTime = new Date(min.getTime() + Math.random() * (max.getTime() - min.getTime()));
            return randomTime.toTimeString().slice(0, 5); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HH:MM
        }