// Define updateWorkTable globally
function updateWorkTable(employees) {
    console.log("üìå –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...", employees);

    const container = document.querySelector(".main-container");
    if (!container) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    container.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    if (!employees || employees.length === 0) {
        console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");
        container.innerHTML = "<p class='no-data'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.</p>";
        return;
    }

    let visibleEmployees = 0;
    employees.forEach(employeeData => {
        if (!employeeData || !employeeData.employee) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", employeeData);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if (!employeeData.work_logs || employeeData.work_logs.length === 0) {
            console.log(`‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeData.employee.full_name} –Ω–µ –∏–º–µ–µ—Ç –ª–æ–≥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
            return;
        }

        console.log("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", employeeData.employee.full_name);
        visibleEmployees++;

        const employeeSection = document.createElement("div");
        employeeSection.className = "employee-section";
        employeeSection.setAttribute("data-group", employeeData.employee.section);

        let workLogsHtml = "";
        employeeData.work_logs.forEach(log => {
            console.log(`üìÖ –î–∞—Ç–∞: ${log.log_date}, —á–∞—Å—ã: ${log.worked_hours}`);
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD/MM/YYYY
            const logDate = new Date(log.log_date);
            const formattedDate = `${logDate.getDate().toString().padStart(2, '0')}/${(logDate.getMonth() + 1).toString().padStart(2, '0')}/${logDate.getFullYear()}`;
            const workedHours = log.worked_hours ? `${Math.floor(log.worked_hours)}h ${Math.round((log.worked_hours % 1) * 60)}min` : '0h 0min';
            workLogsHtml += `
                <tr class="log-row-${employeeData.employee.id}">
                    <td>${formattedDate}</td>
                    <td>${log.check_in_time || "--:--"}</td>
                    <td>${log.check_out_time || "--:--"}</td>
                    <td>${workedHours}</td>
                    <td>
                        <select onchange="updateHolidayStatus(this.dataset.logId, this)"
                                data-log-id="${log.id}"
                                data-employee-id="${employeeData.employee.id}"
                                id="holiday-select-${log.id}">
                            <option value="workingday" ${log.holidays === 'workingday' ? 'selected' : ''}>D√≠a laboral</option>
                            <option value="paid" ${log.holidays === 'paid' ? 'selected' : ''}>Pagado</option>
                            <option value="unpaid" ${log.holidays === 'unpaid' ? 'selected' : ''}>No pagado</option>
                            <option value="weekend" ${log.holidays === 'weekend' ? 'selected' : ''}>Fin de semana</option>
                            <option value="baja por enfermedad" ${log.holidays === 'baja por enfermedad' ? 'selected' : ''}>Baja por enfermedad</option>
                            <option value="maternidad/paternidad" ${log.holidays === 'maternidad/paternidad' ? 'selected' : ''}>Maternidad/paternidad</option>
                            <option value="vacaciones" ${log.holidays === 'vacaciones' ? 'selected' : ''}>Vacaciones</option>
                            <option value="permiso no retribuido" ${log.holidays === 'permiso no retribuido' ? 'selected' : ''}>Permiso no retribuido</option>
                        </select>
                    </td>
                    <td class="checkbox-cell hidden">
                        <input type="checkbox" class="worklog-checkbox" value="${log.id}" id="log-${log.id}">
                    </td>
                </tr>
            `;
        });

        employeeSection.innerHTML = `
            <div class="checkbox-container">
                <input type="checkbox" class="round-checkbox employee-checkbox" id="employee_${employeeData.employee.id}" />
            </div>
            <div class="employee-header">
                <h2>${employeeData.employee.full_name} - ${employeeData.employee.position}</h2>
            </div>
            <div class="logs-summary-container">
                <div class="work-logs-container" id="logs-container-${employeeData.employee.id}">
                    <table class="work-logs-table">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Entrada</th>
                                <th>Salida</th>
                                <th>Total</th>
                                <th>Vacaciones</th>
                                <th class="checkbox-column hidden">Seleccionar</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${workLogsHtml}
                        </tbody>
                    </table>
                    <div class="action-buttons hidden" id="action-buttons-${employeeData.employee.id}">
                        <button class="select-all-btn" onclick="selectAllEmployeeCheckboxes('${employeeData.employee.id}')">Todo</button>
                        <button class="new-schedule-btn" onclick="openNewScheduleModal()">Aleatorio</button>
                        <button class="delete-log-btn" onclick="deleteSelectedWorkLog('${employeeData.employee.id}')">Eliminar seleccionados</button>
                    </div>
                </div>
                <div class="summary-panel">
                    <h3>Resumen</h3>
                    <p><strong>Horas totales:</strong> <span class="total-hours">${employeeData.summary.total_hours}</span> h</p>
                    <p><strong>D√≠as totales:</strong> <span class="total-days">${employeeData.summary.working_days}</span></p>
                    <p><strong>Horas extras:</strong> <span class="overtime-hours">${employeeData.summary.overtime_hours}</span> h</p>
                    <div class="holiday-status">
                        <p>Vacaciones pagadas: <span class="paid-holidays badge yellow">${employeeData.summary.paid_holidays}</span></p>
                        <p>Vacaciones no pagadas: <span class="unpaid-holidays badge orange">${employeeData.summary.unpaid_holidays}</span></p>
                    </div>
                </div>
            </div>
        `;

        container.appendChild(employeeSection);
    });

    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${visibleEmployees}`);
}

// Ensure the function is available globally
window.updateWorkTable = updateWorkTable;

// Additional event listeners or initialization if needed
document.getElementById('filterButton').addEventListener('click', function() {
    toggleFilterModal(this);
});

window.updateHolidayStatus = function(selectElement, employeeId) {
    const logId = selectElement.dataset.logId;
    const newHolidayStatus = selectElement.value;
    const previousValue = selectElement.dataset.previousValue;

    console.log(`üü° –í—ã–±—Ä–∞–Ω logId=${logId}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newHolidayStatus}`);

    if (!logId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: logId –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    $.ajax({
        url: `/update_work_log/${logId}`,
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
            holiday_status: newHolidayStatus,
            employee_id: employeeId,
            reset_worklog: newHolidayStatus === "paid" || newHolidayStatus === "unpaid" || newHolidayStatus === "weekend"
        }),
        success: function(response) {
            if (response.success) {
                console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ${response.updated_holiday_status}`);

                // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–æ—Å—å
                selectElement.dataset.previousValue = response.updated_holiday_status;
                selectElement.value = response.updated_holiday_status;  // <-- –≠—Ç–æ —Ñ–∏–∫—Å–∏—Ç —Å–±—Ä–æ—Å

                updateSummaryPanel(employeeId, response.summary);

                if (response.reset) {
                    const row = selectElement.closest("tr");
                    row.querySelector(".check-in-time").textContent = "--:--";
                    row.querySelector(".check-out-time").textContent = "--:--";
                    row.querySelector(".worked-hours").textContent = "0h 0min";
                    console.log(`‚úÖ Work log –æ–±–Ω—É–ª—ë–Ω –¥–ª—è log ${logId}`);
                }
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
                selectElement.value = previousValue;  // <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }
        },
        error: function(xhr, status, error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ AJAX: ${error} (Status: ${xhr.status})`);
            selectElement.value = previousValue;  // <-- –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        }
    });
};
document.getElementById('randomForm')?.addEventListener('submit', function(event) {
    event.preventDefault();

    const startRangeMin = document.getElementById('startRangeMin').value;
    const startRangeMax = document.getElementById('startRangeMax').value;
    const endRangeMin = document.getElementById('endRangeMin').value;
    const endRangeMax = document.getElementById('endRangeMax').value;

    console.log(`üìå –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: Entrada: ${startRangeMin} - ${startRangeMax}, Salida: ${endRangeMin} - ${endRangeMax}`);

    const selectedLogIds = window.selectedLogIds || [];
    console.log(`üìå –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ª–æ–≥-ID: ${selectedLogIds}`);

    selectedLogIds.forEach(logId => {
        const randomCheckIn = generateRandomTime(startRangeMin, startRangeMax);
        const randomCheckOut = generateRandomTime(endRangeMin, endRangeMax);
        const employeeId = document.querySelector(`#holiday-select-${logId}`).dataset.employeeId;

        console.log(`üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ log ${logId}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeId}: Check-in: ${randomCheckIn}, Check-out: ${randomCheckOut}`);

        $.ajax({
            url: `/update_work_log/${logId}`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                holiday_status: 'workingday',
                check_in_time: randomCheckIn,
                check_out_time: randomCheckOut,
                employee_id: employeeId,
                reset_worklog: false
            }),
            success: function(response) {
                if (response.success) {
                    console.log(`‚úÖ –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è log ${logId}`);

                    // üìå –û–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    const row = document.querySelector(`.log-row-${employeeId}[data-log-id="${logId}"]`);
                    if (row) {
                        row.querySelector(".check-in-time").textContent = response.updated_check_in;
                        row.querySelector(".check-out-time").textContent = response.updated_check_out;
                        row.querySelector(".worked-hours").textContent = response.updated_worked_hours;
                    } else {
                        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è log ${logId} –≤ UI`);
                    }
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
                }
            },
            error: function(xhr, status, error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ AJAX: ${error} (Status: ${xhr.status})`);
            }
        });
    });

    closeRandomModal();
});

function updateWorkLogInUI(response) {
    const logRow = document.querySelector(`tr[data-log-id="${response.log_id}"]`);

    if (logRow) {
        logRow.querySelector(".check-in-time").textContent = response.updated_check_in;
        logRow.querySelector(".check-out-time").textContent = response.updated_check_out;
        logRow.querySelector(".worked-hours").textContent = response.updated_worked_hours;

        // üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "D√≠a laboral"
        const holidaySelect = logRow.querySelector(`#holiday-select-${response.log_id}`);
        if (holidaySelect) {
            holidaySelect.value = "workingday";
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "D√≠a laboral" –¥–ª—è log ${response.log_id}`);
        }
    } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω log ${response.log_id} –≤ DOM.`);
    }
}
// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–ª–æ–≥–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
function refreshWorkLogs() {
    fetch("/get_work_logs")
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                sortLogsByDate(data.logs);
                renderLogs(data.logs);
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ—Ä–∫–ª–æ–≥–æ–≤:", data.message);
            }
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Ä–∫–ª–æ–≥–æ–≤:", error));
}

document.querySelectorAll('.holiday-select').forEach(select => {
  select.addEventListener('change', async function() {
    const row = this.closest('tr');
    const logId = row.getAttribute('data-log-id');
    const holidayStatus = this.value;
    // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å true
    const reset = ['paid','unpaid','weekend'].includes(holidayStatus);

    try {
      const res = await fetch(`/update_work_log/${logId}`, {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          holiday_status: holidayStatus,
          reset_worklog: reset
        })
      });
      const json = await res.json();
      if (!json.success) throw new Error(json.message||'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');

      // –æ–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
      row.querySelector('.check-in').textContent  = json.updated_check_in;
      row.querySelector('.check-out').textContent = json.updated_check_out;
      row.querySelector('.worked-hours').textContent = json.updated_worked_hours;

    } catch(err) {
      console.error(err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + err.message);
    }
  });
});
